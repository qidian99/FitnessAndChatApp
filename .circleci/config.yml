version: 2
jobs:
  build:
    working_directory: ~/code
    docker:
      - image: circleci/android:api-27
    environment:
      JVM_OPTS: -Xmx1024m -XX:ParallelGCThreads=2 -XX:ConcGCThreads=2 -XX:ParallelGCThreads=2 -Djava.util.concurrent.ForkJoinPool.common.parallelism=2
      GRADLE_OPTS: -Xmx2048m -Dorg.gradle.daemon=false
    resource_class: large
    steps:
      - checkout
      - restore_cache:
          key: jars-{{ checksum "build.gradle" }}-{{ checksum  "app/build.gradle" }}
#      - run:
#         name: Chmod permissions #if permission for Gradlew Dependencies fail, use this.
#         command: sudo chmod +x ./gradlew
      - run:
          name: Download Dependencies
          command: ./gradlew androidDependencies
      - save_cache:
          paths:
            - ~/.gradle
          key: jars-{{ checksum "build.gradle" }}-{{ checksum  "app/build.gradle" }}
      - run:
          name: Run Tests
          command: ./gradlew lint test --no-daemon -Pkotlin.incremental=false --max-workers=2
      - store_artifacts: # for display in Artifacts: https://circleci.com/docs/2.0/artifacts/
          path: app/build/reports
          destination: reports
      - store_test_results: # for display in Test Summary: https://circleci.com/docs/2.0/collect-test-data/
          path: app/build/test-results
      # See https://circleci.com/docs/2.0/deployment-integrations/ for deploy examples
  android_test:
    resource_class: large
    working_directory: ~/code
    docker:
      - image: circleci/android:api-27  # gcloud is baked into this image
    steps:
      - checkout
      - restore_cache:
          key: jars-{{ checksum "build.gradle" }}-{{ checksum  "app/build.gradle" }}
      - run:
          name: Build debug APK and release APK
          command: |
            ./gradlew :app:assembleDebug --max-workers=2
            ./gradlew :app:assembleDebugAndroidTest --max-workers=2
      - run:
          name: Store Google Service Account
          command: echo $GCLOUD_SERVICE_KEY > ${HOME}/gcloud-service-key.json
      - run:
          name: Authorize gcloud and set config defaults
          command: |
            sudo gcloud auth activate-service-account --key-file=${HOME}/gcloud-service-key.json
            sudo gcloud --quiet config set project ${GOOGLE_PROJECT_ID}
      - run:
          name: Test with Firebase Test Lab
          command: |
            sudo gcloud firebase test android run \
              --type instrumentation \
              --app ./app/build/outputs/apk/debug/app-debug.apk \
              --test ./app/build/outputs/apk/androidTest/debug/app-debug-androidTest.apk \
              2>&1 | tee gcloud-output.txt
            echo "Extracting test results location..."
            cat gcloud-output.txt | grep "Raw results will be stored in your GCS bucket at \[https://console.developers.google.com/storage" | grep -o "\[.*\]" | sed 's/\[.*console.developers.google.com\/storage\/browser\/\(.*\)\/]/\1/' > test-results-location.txt
            echo "Found test results location: $(cat test-results-location.txt)"
      - run:
          name: Install gsutil dependency and copy test results data
          command: |
            export TEST_RESULTS=$(cat test-results-location.txt)
            echo "Test results location: $TEST_RESULTS"
            sudo pip install -U crcmod
            mkdir test_results
            sudo gsutil -m cp -r -U `sudo gsutil ls gs://$TEST_RESULTS | tail -1` test_results/ | true
      - store_artifacts:
          path: test_results

workflows:
  version: 2
  build_and_android_test:
    jobs:
      - build
      - android_test:
          requires:
            - build
          filters:
            branches:
              only: master